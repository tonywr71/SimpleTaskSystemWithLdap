<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Abp.Zero</name>
    </assembly>
    <members>
        <member name="T:Abp.Auditing.AuditingStore">
            <summary>
            Implements <see cref="T:Abp.Auditing.IAuditingStore"/> to save auditing informations to database.
            </summary>
        </member>
        <member name="M:Abp.Auditing.AuditingStore.#ctor(Abp.Domain.Repositories.IRepository{Abp.Auditing.AuditLog,System.Int64})">
            <summary>
            Creates  a new <see cref="T:Abp.Auditing.AuditingStore"/>.
            </summary>
        </member>
        <member name="T:Abp.Auditing.AuditLog">
            <summary>
            Used to store audit logs.
            </summary>
        </member>
        <member name="F:Abp.Auditing.AuditLog.MaxServiceNameLength">
            <summary>
            Maximum length of <see cref="P:Abp.Auditing.AuditLog.ServiceName"/> property.
            </summary>
        </member>
        <member name="F:Abp.Auditing.AuditLog.MaxMethodNameLength">
            <summary>
            Maximum length of <see cref="P:Abp.Auditing.AuditLog.MethodName"/> property.
            </summary>
        </member>
        <member name="F:Abp.Auditing.AuditLog.MaxParametersLength">
            <summary>
            Maximum length of <see cref="P:Abp.Auditing.AuditLog.Parameters"/> property.
            </summary>
        </member>
        <member name="F:Abp.Auditing.AuditLog.MaxClientIpAddressLength">
            <summary>
            Maximum length of <see cref="P:Abp.Auditing.AuditLog.ClientIpAddress"/> property.
            </summary>
        </member>
        <member name="F:Abp.Auditing.AuditLog.MaxClientNameLength">
            <summary>
            Maximum length of <see cref="P:Abp.Auditing.AuditLog.ClientName"/> property.
            </summary>
        </member>
        <member name="F:Abp.Auditing.AuditLog.MaxBrowserInfoLength">
            <summary>
            Maximum length of <see cref="P:Abp.Auditing.AuditLog.BrowserInfo"/> property.
            </summary>
        </member>
        <member name="F:Abp.Auditing.AuditLog.MaxExceptionLength">
            <summary>
            Maximum length of <see cref="P:Abp.Auditing.AuditLog.Exception"/> property.
            </summary>
        </member>
        <member name="M:Abp.Auditing.AuditLog.CreateFromAuditInfo(Abp.Auditing.AuditInfo)">
            <summary>
            Creates a new CreateFromAuditInfo from given <see cref="!:auditInfo"/>.
            </summary>
            <param name="auditInfo">Source <see cref="T:Abp.Auditing.AuditInfo"/> object</param>
            <returns>The <see cref="T:Abp.Auditing.AuditLog"/> object that is created using <see cref="!:auditInfo"/></returns>
        </member>
        <member name="P:Abp.Auditing.AuditLog.TenantId">
            <summary>
            TenantId.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditLog.UserId">
            <summary>
            UserId.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditLog.ServiceName">
            <summary>
            Service (class/interface) name.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditLog.MethodName">
            <summary>
            Executed method name.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditLog.Parameters">
            <summary>
            Calling parameters.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditLog.ExecutionTime">
            <summary>
            Start time of the method execution.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditLog.ExecutionDuration">
            <summary>
            Total duration of the method call as milliseconds.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditLog.ClientIpAddress">
            <summary>
            IP address of the client.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditLog.ClientName">
            <summary>
            Name (generally computer name) of the client.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditLog.BrowserInfo">
            <summary>
            Browser information if this method is called in a web request.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditLog.Exception">
            <summary>
            Exception object, if an exception occured during execution of the method.
            </summary>
        </member>
        <member name="T:Abp.Authorization.PermissionChecker`3">
            <summary>
            Application should inherit this class to implement <see cref="T:Abp.Authorization.IPermissionChecker"/>.
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TRole"></typeparam>
            <typeparam name="TUser"></typeparam>
        </member>
        <member name="M:Abp.Authorization.PermissionChecker`3.#ctor(Abp.Authorization.Users.AbpUserManager{`0,`1,`2})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Abp.Authorization.PermissionGrantInfo">
            <summary>
            Represents a permission <see cref="P:Abp.Authorization.PermissionGrantInfo.Name"/> with <see cref="P:Abp.Authorization.PermissionGrantInfo.IsGranted"/> information.
            </summary>
        </member>
        <member name="M:Abp.Authorization.PermissionGrantInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Abp.Authorization.PermissionGrantInfo"/>.
            </summary>
            <param name="name"></param>
            <param name="isGranted"></param>
        </member>
        <member name="P:Abp.Authorization.PermissionGrantInfo.Name">
            <summary>
            Name of the permission.
            </summary>
        </member>
        <member name="P:Abp.Authorization.PermissionGrantInfo.IsGranted">
            <summary>
            Is this permission granted Prohibited?
            </summary>
        </member>
        <member name="T:Abp.Authorization.Users.DefaultExternalAuthenticationSource`2">
            <summary>
            This is a helper base class to easily update <see cref="T:Abp.Authorization.Users.IExternalAuthenticationSource`2"/>.
            Implements some methods as default but you can override all methods.
            </summary>
            <typeparam name="TTenant">Tenant type</typeparam>
            <typeparam name="TUser">User type</typeparam>
        </member>
        <member name="T:Abp.Authorization.Users.IExternalAuthenticationSource`2">
            <summary>
            Defines an authorization source to be used by <see cref="M:Abp.Authorization.Users.AbpUserManager`3.LoginAsync(Microsoft.AspNet.Identity.UserLoginInfo,System.String)"/> method.
            </summary>
            <typeparam name="TTenant">Tenant type</typeparam>
            <typeparam name="TUser">User type</typeparam>
        </member>
        <member name="M:Abp.Authorization.Users.IExternalAuthenticationSource`2.TryAuthenticateAsync(System.String,System.String,`0)">
            <summary>
            Used to try authenticate a user by this source.
            </summary>
            <param name="userNameOrEmailAddress">User name or email address</param>
            <param name="plainPassword">Plain password of the user</param>
            <param name="tenant">Tenant of the user or null (if user is a host user)</param>
            <returns>True, indicates that this used has authenticated by this source</returns>
        </member>
        <member name="M:Abp.Authorization.Users.IExternalAuthenticationSource`2.CreateUserAsync(System.String,`0)">
            <summary>
            This method is a user authenticated by this source which does not exists yet.
            So, source should create the User and fill properties.
            </summary>
            <param name="userNameOrEmailAddress">User name or email address</param>
            <param name="tenant">Tenant of the user or null (if user is a host user)</param>
            <returns>Newly created user</returns>
        </member>
        <member name="M:Abp.Authorization.Users.IExternalAuthenticationSource`2.UpdateUserAsync(`1,`0)">
            <summary>
            This method is called after an existing user is authenticated by this source.
            It can be used to update some properties of the user by the source.
            </summary>
            <param name="user">The user that can be updated</param>
            <param name="tenant">Tenant of the user or null (if user is a host user)</param>
        </member>
        <member name="P:Abp.Authorization.Users.IExternalAuthenticationSource`2.Name">
            <summary>
            Unique name of the authentication source.
            This source name is set to <see cref="P:Abp.Authorization.Users.AbpUser`2.AuthenticationSource"/>
            if the user authenticated by this authentication source
            </summary>
        </member>
        <member name="M:Abp.Authorization.Users.DefaultExternalAuthenticationSource`2.TryAuthenticateAsync(System.String,System.String,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Authorization.Users.DefaultExternalAuthenticationSource`2.CreateUserAsync(System.String,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Authorization.Users.DefaultExternalAuthenticationSource`2.UpdateUserAsync(`1,`0)">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Authorization.Users.DefaultExternalAuthenticationSource`2.Name">
            <inheritdoc/>
        </member>
        <member name="T:Abp.Authorization.Users.IUserPermissionStore`2">
            <summary>
            Used to perform permission database operations for a user.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Users.IUserPermissionStore`2.AddPermissionAsync(`1,Abp.Authorization.PermissionGrantInfo)">
            <summary>
            Adds a permission grant setting to a user.
            </summary>
            <param name="user">User</param>
            <param name="permissionGrant">Permission grant setting info</param>
        </member>
        <member name="M:Abp.Authorization.Users.IUserPermissionStore`2.RemovePermissionAsync(`1,Abp.Authorization.PermissionGrantInfo)">
            <summary>
            Removes a permission grant setting from a user.
            </summary>
            <param name="user">User</param>
            <param name="permissionGrant">Permission grant setting info</param>
        </member>
        <member name="M:Abp.Authorization.Users.IUserPermissionStore`2.GetPermissionsAsync(System.Int64)">
            <summary>
            Gets permission grant setting informations for a user.
            </summary>
            <param name="userId">User id</param>
            <returns>List of permission setting informations</returns>
        </member>
        <member name="M:Abp.Authorization.Users.IUserPermissionStore`2.HasPermissionAsync(System.Int64,Abp.Authorization.PermissionGrantInfo)">
            <summary>
            Checks whether a role has a permission grant setting info.
            </summary>
            <param name="userId">User id</param>
            <param name="permissionGrant">Permission grant setting info</param>
            <returns></returns>
        </member>
        <member name="M:Abp.Authorization.Users.IUserPermissionStore`2.RemoveAllPermissionSettingsAsync(`1)">
            <summary>
            Deleted all permission settings for a role.
            </summary>
            <param name="user">User</param>
        </member>
        <member name="T:Abp.Authorization.Roles.RolePermissionSetting">
            <summary>
            Used to store setting for a permission for a role.
            </summary>
        </member>
        <member name="T:Abp.Authorization.PermissionSetting">
            <summary>
            Used to grant/deny a permission for a role or user.
            </summary>
        </member>
        <member name="F:Abp.Authorization.PermissionSetting.MaxNameLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Authorization.PermissionSetting.Name"/> field.
            </summary>
        </member>
        <member name="M:Abp.Authorization.PermissionSetting.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Authorization.PermissionSetting"/> entity.
            </summary>
        </member>
        <member name="P:Abp.Authorization.PermissionSetting.Name">
            <summary>
            Unique name of the permission.
            </summary>
        </member>
        <member name="P:Abp.Authorization.PermissionSetting.IsGranted">
            <summary>
            Is this role granted for this permission.
            Default value: true.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Roles.RolePermissionSetting.RoleId">
            <summary>
            Role id.
            </summary>
        </member>
        <member name="T:Abp.Authorization.Roles.IRolePermissionStore`3">
            <summary>
            Used to perform permission database operations for a role.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Roles.IRolePermissionStore`3.AddPermissionAsync(`1,Abp.Authorization.PermissionGrantInfo)">
            <summary>
            Adds a permission grant setting to a role.
            </summary>
            <param name="role">Role</param>
            <param name="permissionGrant">Permission grant setting info</param>
        </member>
        <member name="M:Abp.Authorization.Roles.IRolePermissionStore`3.RemovePermissionAsync(`1,Abp.Authorization.PermissionGrantInfo)">
            <summary>
            Removes a permission grant setting from a role.
            </summary>
            <param name="role">Role</param>
            <param name="permissionGrant">Permission grant setting info</param>
        </member>
        <member name="M:Abp.Authorization.Roles.IRolePermissionStore`3.GetPermissionsAsync(`1)">
            <summary>
            Gets permission grant setting informations for a role.
            </summary>
            <param name="role">Role</param>
            <returns>List of permission setting informations</returns>
        </member>
        <member name="M:Abp.Authorization.Roles.IRolePermissionStore`3.GetPermissionsAsync(System.Int32)">
            <summary>
            Gets permission grant setting informations for a role.
            </summary>
            <param name="roleId">Role id</param>
            <returns>List of permission setting informations</returns>
        </member>
        <member name="M:Abp.Authorization.Roles.IRolePermissionStore`3.HasPermissionAsync(System.Int32,Abp.Authorization.PermissionGrantInfo)">
            <summary>
            Checks whether a role has a permission grant setting info.
            </summary>
            <param name="roleId">Role id</param>
            <param name="permissionGrant">Permission grant setting info</param>
            <returns></returns>
        </member>
        <member name="M:Abp.Authorization.Roles.IRolePermissionStore`3.RemoveAllPermissionSettingsAsync(`1)">
            <summary>
            Deleted all permission settings for a role.
            </summary>
            <param name="role">Role</param>
        </member>
        <member name="T:Abp.Authorization.Users.AbpUserManagerExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Authorization.Users.AbpUserManager`3"/>.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserManagerExtensions.IsGranted``3(Abp.Authorization.Users.AbpUserManager{``0,``1,``2},System.Int64,System.String)">
            <summary>
            Check whether a user is granted for a permission.
            </summary>
            <param name="manager">User manager</param>
            <param name="userId">User id</param>
            <param name="permissionName">Permission name</param>
        </member>
        <member name="T:Abp.Authorization.Roles.RolePermissionCacheItem">
            <summary>
            Used to cache permissions of a role.
            It's invalidated on;
            + Role delete
            + Role-Permission changes
            + External cache clear for <see cref="F:Abp.Authorization.Roles.RolePermissionCacheItem.CacheStoreName"/>
            </summary>
        </member>
        <member name="T:Abp.Authorization.Users.UserPermissionCacheItem">
            <summary>
            Used to cache roles and permissions of a user.
            It's invalidated on;
            + User delete
            + Role delete
            + User-Role changes
            + User-Permission changes
            + External cache clear for <see cref="F:Abp.Authorization.Users.UserPermissionCacheItem.CacheStoreName"/>
            </summary>
        </member>
        <member name="T:Abp.Authorization.Users.UserPermissionSetting">
            <summary>
            Used to store setting for a permission for a user.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.UserPermissionSetting.UserId">
            <summary>
            User id.
            </summary>
        </member>
        <member name="T:Abp.Configuration.Setting">
            <summary>
            Represents a setting for a tenant or user.
            </summary>
        </member>
        <member name="F:Abp.Configuration.Setting.MaxNameLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Configuration.Setting.Name"/> property.
            </summary>
        </member>
        <member name="F:Abp.Configuration.Setting.MaxValueLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Configuration.Setting.Value"/> property.
            </summary>
        </member>
        <member name="M:Abp.Configuration.Setting.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Configuration.Setting"/> object.
            </summary>
        </member>
        <member name="M:Abp.Configuration.Setting.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Abp.Configuration.Setting"/> object.
            </summary>
            <param name="tenantId">TenantId for this setting</param>
            <param name="userId">UserId for this setting</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="P:Abp.Configuration.Setting.TenantId">
            <summary>
            TenantId for this setting.
            TenantId is null if this setting is not Tenant level.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Setting.UserId">
            <summary>
            UserId for this setting.
            UserId is null if this setting is not user level.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Setting.Name">
            <summary>
            Unique name of the setting.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Setting.Value">
            <summary>
            Value of the setting.
            </summary>
        </member>
        <member name="T:Abp.Configuration.SettingExtensions">
            <summary>
            Implements methods to convert objects between SettingInfo and Setting classes.
            </summary>
        </member>
        <member name="M:Abp.Configuration.SettingExtensions.ToSetting(Abp.Configuration.SettingInfo)">
            <summary>
            Creates new <see cref="T:Abp.Configuration.Setting"/> object from given <see cref="T:Abp.Configuration.SettingInfo"/> object.
            </summary>
        </member>
        <member name="M:Abp.Configuration.SettingExtensions.ToSettingInfo(Abp.Configuration.Setting)">
            <summary>
            Creates new <see cref="T:Abp.Configuration.SettingInfo"/> object from given <see cref="T:Abp.Configuration.Setting"/> object.
            </summary>
        </member>
        <member name="M:Abp.IdentityFramework.IdentityResultExtensions.CheckErrors(Microsoft.AspNet.Identity.IdentityResult)">
            <summary>
            Checks errors of given <see cref="T:Microsoft.AspNet.Identity.IdentityResult"/> and throws <see cref="T:Abp.UI.UserFriendlyException"/> if it's not succeeded.
            </summary>
            <param name="identityResult">Identity result to check</param>
        </member>
        <member name="M:Abp.IdentityFramework.IdentityResultExtensions.CheckErrors(Microsoft.AspNet.Identity.IdentityResult,Abp.Localization.ILocalizationManager)">
            <summary>
            Checks errors of given <see cref="T:Microsoft.AspNet.Identity.IdentityResult"/> and throws <see cref="T:Abp.UI.UserFriendlyException"/> if it's not succeeded.
            </summary>
            <param name="identityResult">Identity result to check</param>
            <param name="localizationManager">Localization manager to localize error messages</param>
        </member>
        <member name="T:Abp.MultiTenancy.AbpTenantManager`3">
            <summary>
            Tenant manager.
            Implements domain logic for <see cref="T:Abp.MultiTenancy.AbpTenant`2"/>.
            </summary>
            <typeparam name="TTenant">Type of the application Tenant</typeparam>
            <typeparam name="TRole">Type of the application Role</typeparam>
            <typeparam name="TUser">Type of the application User</typeparam>
        </member>
        <member name="T:Abp.MultiTenancy.IMayHaveTenant`2">
            <summary>
            Implement this interface for an entity which may have Tenant.
            </summary>
        </member>
        <member name="P:Abp.MultiTenancy.IMayHaveTenant`2.Tenant">
            <summary>
            Tenant.
            </summary>
        </member>
        <member name="T:Abp.MultiTenancy.IMustHaveTenant`2">
            <summary>
            Implement this interface for an entity which must have Tenant.
            </summary>
        </member>
        <member name="P:Abp.MultiTenancy.IMustHaveTenant`2.Tenant">
            <summary>
            Tenant.
            </summary>
        </member>
        <member name="T:Abp.Authorization.Roles.AbpRoleManager`3">
            <summary>
            Extends <see cref="T:Microsoft.AspNet.Identity.RoleManager`2"/> of ASP.NET Identity Framework.
            Applications should derive this class with appropriate generic arguments.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.#ctor(Abp.Authorization.Roles.AbpRoleStore{`0,`1,`2},Abp.Authorization.IPermissionManager,Abp.Zero.Configuration.IRoleManagementConfig,Abp.Runtime.Caching.ICacheManager)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.HasPermissionAsync(System.String,System.String)">
            <summary>
            Checks if a role has a permission.
            </summary>
            <param name="roleName">The role's name to check it's permission</param>
            <param name="permissionName">Name of the permission</param>
            <returns>True, if the role has the permission</returns>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.HasPermissionAsync(System.Int32,System.String)">
            <summary>
            Checks if a role has a permission.
            </summary>
            <param name="roleId">The role's id to check it's permission</param>
            <param name="permissionName">Name of the permission</param>
            <returns>True, if the role has the permission</returns>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.HasPermissionAsync(`1,Abp.Authorization.Permission)">
            <summary>
            Checks if a role has a permission.
            </summary>
            <param name="role">The role</param>
            <param name="permission">The permission</param>
            <returns>True, if the role has the permission</returns>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.HasPermissionAsync(System.Int32,Abp.Authorization.Permission)">
            <summary>
            Checks if a role has a permission.
            </summary>
            <param name="roleId">role id</param>
            <param name="permission">The permission</param>
            <returns>True, if the role has the permission</returns>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.GetGrantedPermissionsAsync(System.Int32)">
            <summary>
            Gets granted permission names for a role.
            </summary>
            <param name="roleId">Role id</param>
            <returns>List of granted permissions</returns>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.GetGrantedPermissionsAsync(System.String)">
            <summary>
            Gets granted permission names for a role.
            </summary>
            <param name="roleName">Role name</param>
            <returns>List of granted permissions</returns>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.GetGrantedPermissionsAsync(`1)">
            <summary>
            Gets granted permissions for a role.
            </summary>
            <param name="role">Role</param>
            <returns>List of granted permissions</returns>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.SetGrantedPermissionsAsync(System.Int32,System.Collections.Generic.IEnumerable{Abp.Authorization.Permission})">
            <summary>
            Sets all granted permissions of a role at once.
            Prohibits all other permissions.
            </summary>
            <param name="roleId">Role id</param>
            <param name="permissions">Permissions</param>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.SetGrantedPermissionsAsync(`1,System.Collections.Generic.IEnumerable{Abp.Authorization.Permission})">
            <summary>
            Sets all granted permissions of a role at once.
            Prohibits all other permissions.
            </summary>
            <param name="role">The role</param>
            <param name="permissions">Permissions</param>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.GrantPermissionAsync(`1,Abp.Authorization.Permission)">
            <summary>
            Grants a permission for a role.
            </summary>
            <param name="role">Role</param>
            <param name="permission">Permission</param>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.ProhibitPermissionAsync(`1,Abp.Authorization.Permission)">
            <summary>
            Prohibits a permission for a role.
            </summary>
            <param name="role">Role</param>
            <param name="permission">Permission</param>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.ProhibitAllPermissionsAsync(`1)">
            <summary>
            Prohibits all permissions for a role.
            </summary>
            <param name="role">Role</param>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.ResetAllPermissionsAsync(`1)">
            <summary>
            Resets all permission settings for a role.
            It removes all permission settings for the role.
            Role will have permissions those have <see cref="P:Abp.Authorization.Permission.IsGrantedByDefault"/> set to true.
            </summary>
            <param name="role">Role</param>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.CreateAsync(`1)">
            <summary>
            Creates a role.
            </summary>
            <param name="role">Role</param>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.DeleteAsync(`1)">
            <summary>
            Deletes a role.
            </summary>
            <param name="role">Role</param>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.GetRoleByIdAsync(System.Int32)">
            <summary>
            Gets a role by given id.
            Throws exception if no role with given id.
            </summary>
            <param name="roleId">Role id</param>
            <returns>Role</returns>
            <exception cref="T:Abp.AbpException">Throws exception if no role with given id</exception>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleManager`3.GetRoleByNameAsync(System.String)">
            <summary>
            Gets a role by given name.
            Throws exception if no role with given roleName.
            </summary>
            <param name="roleName">Role name</param>
            <returns>Role</returns>
            <exception cref="T:Abp.AbpException">Throws exception if no role with given roleName</exception>
        </member>
        <member name="T:Abp.Runtime.Session.AbpSession">
            <summary>
            Implements IAbpSession to get session informations from ASP.NET Identity framework.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Session.AbpSession.#ctor(Abp.Configuration.Startup.IMultiTenancyConfig)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Abp.Configuration.SettingStore">
            <summary>
            Implements <see cref="T:Abp.Configuration.ISettingStore"/>.
            </summary>
        </member>
        <member name="M:Abp.Configuration.SettingStore.#ctor(Abp.Domain.Repositories.IRepository{Abp.Configuration.Setting,System.Int64})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Abp.Authorization.Roles.AbpRoleStore`3">
            <summary>
            Implements 'Role Store' of ASP.NET Identity Framework.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleStore`3.#ctor(Abp.Domain.Repositories.IRepository{`1},Abp.Domain.Repositories.IRepository{Abp.Authorization.Users.UserRole,System.Int64},Abp.Domain.Repositories.IRepository{Abp.Authorization.Roles.RolePermissionSetting,System.Int64},Abp.Runtime.Caching.ICacheManager)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleStore`3.AddPermissionAsync(`1,Abp.Authorization.PermissionGrantInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleStore`3.RemovePermissionAsync(`1,Abp.Authorization.PermissionGrantInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleStore`3.GetPermissionsAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleStore`3.HasPermissionAsync(System.Int32,Abp.Authorization.PermissionGrantInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRoleStore`3.RemoveAllPermissionSettingsAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="T:Abp.Authorization.Users.AbpUserManager`3">
            <summary>
            Extends <see cref="T:Microsoft.AspNet.Identity.UserManager`2"/> of ASP.NET Identity Framework.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserManager`3.IsGrantedAsync(System.Int64,System.String)">
            <summary>
            Check whether a user is granted for a permission.
            </summary>
            <param name="userId">User id</param>
            <param name="permissionName">Permission name</param>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserManager`3.IsGrantedAsync(`2,Abp.Authorization.Permission)">
            <summary>
            Check whether a user is granted for a permission.
            </summary>
            <param name="user">User</param>
            <param name="permission">Permission</param>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserManager`3.IsGrantedAsync(System.Int64,Abp.Authorization.Permission)">
            <summary>
            Check whether a user is granted for a permission.
            </summary>
            <param name="userId">User id</param>
            <param name="permission">Permission</param>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserManager`3.GetGrantedPermissionsAsync(`2)">
            <summary>
            Gets granted permissions for a user.
            </summary>
            <param name="user">Role</param>
            <returns>List of granted permissions</returns>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserManager`3.SetGrantedPermissionsAsync(`2,System.Collections.Generic.IEnumerable{Abp.Authorization.Permission})">
            <summary>
            Sets all granted permissions of a user at once.
            Prohibits all other permissions.
            </summary>
            <param name="user">The user</param>
            <param name="permissions">Permissions</param>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserManager`3.ProhibitAllPermissionsAsync(`2)">
            <summary>
            Prohibits all permissions for a user.
            </summary>
            <param name="user">User</param>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserManager`3.ResetAllPermissionsAsync(`2)">
            <summary>
            Resets all permission settings for a user.
            It removes all permission settings for the user.
            User will have permissions according to his roles.
            This method does not prohibit all permissions.
            For that, use <see cref="M:Abp.Authorization.Users.AbpUserManager`3.ProhibitAllPermissionsAsync(`2)"/>.
            </summary>
            <param name="user">User</param>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserManager`3.GrantPermissionAsync(`2,Abp.Authorization.Permission)">
            <summary>
            Grants a permission for a user if not already granted.
            </summary>
            <param name="user">User</param>
            <param name="permission">Permission</param>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserManager`3.ProhibitPermissionAsync(`2,Abp.Authorization.Permission)">
            <summary>
            Prohibits a permission for a user if it's granted.
            </summary>
            <param name="user">User</param>
            <param name="permission">Permission</param>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserManager`3.GetUserByIdAsync(System.Int64)">
            <summary>
            Gets a user by given id.
            Throws exception if no user found with given id.
            </summary>
            <param name="userId">User id</param>
            <returns>User</returns>
            <exception cref="T:Abp.AbpException">Throws exception if no user found with given id</exception>
        </member>
        <member name="T:Abp.Authorization.Users.AbpUserStore`3">
            <summary>
            Implements 'User Store' of ASP.NET Identity Framework.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserStore`3.#ctor(Abp.Domain.Repositories.IRepository{`2,System.Int64},Abp.Domain.Repositories.IRepository{Abp.Authorization.Users.UserLogin,System.Int64},Abp.Domain.Repositories.IRepository{Abp.Authorization.Users.UserRole,System.Int64},Abp.Domain.Repositories.IRepository{`1},Abp.Domain.Repositories.IRepository{Abp.Authorization.Users.UserPermissionSetting,System.Int64},Abp.Domain.Uow.IUnitOfWorkManager,Abp.Runtime.Caching.ICacheManager)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserStore`3.FindByNameOrEmailAsync(System.String)">
            <summary>
            Tries to find a user with user name or email address.
            </summary>
            <param name="userNameOrEmailAddress">User name or email address</param>
            <returns>User or null</returns>
        </member>
        <member name="M:Abp.Authorization.Users.AbpUserStore`3.FindByNameOrEmailAsync(System.Nullable{System.Int32},System.String)">
            <summary>
            Tries to find a user with user name or email address.
            </summary>
            <param name="tenantId">Tenant Id</param>
            <param name="userNameOrEmailAddress">User name or email address</param>
            <returns>User or null</returns>
        </member>
        <member name="T:Abp.Authorization.Roles.AbpRole`2">
            <summary>
            Represents a role in an application. A role is used to group permissions.
            </summary>
            <remarks> 
            Application should use permissions to check if user is granted to perform an operation.
            Checking 'if a user has a role' is not possible until the role is static (<see cref="P:Abp.Authorization.Roles.AbpRole`2.IsStatic"/>).
            Static roles can be used in the code and can not be deleted by users.
            Non-static (dynamic) roles can be added/removed by users and we can not know their name while coding.
            A user can have multiple roles. Thus, user will have all permissions of all assigned roles.
            </remarks>
        </member>
        <member name="F:Abp.Authorization.Roles.AbpRole`2.MaxNameLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Authorization.Roles.AbpRole`2.Name"/> property.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Roles.AbpRole`2.MaxDisplayNameLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Authorization.Roles.AbpRole`2.Name"/> property.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRole`2.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Authorization.Roles.AbpRole`2"/> object.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRole`2.#ctor(System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a new <see cref="T:Abp.Authorization.Roles.AbpRole`2"/> object.
            </summary>
            <param name="tenantId">TenantId or null (if this is not a tenant-level role)</param>
            <param name="displayName">Display name of the role</param>
        </member>
        <member name="M:Abp.Authorization.Roles.AbpRole`2.#ctor(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Abp.Authorization.Roles.AbpRole`2"/> object.
            </summary>
            <param name="tenantId">TenantId or null (if this is not a tenant-level role)</param>
            <param name="name">Unique role name</param>
            <param name="displayName">Display name of the role</param>
        </member>
        <member name="P:Abp.Authorization.Roles.AbpRole`2.Tenant">
            <summary>
            The Tenant, if this role is a tenant-level role.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Roles.AbpRole`2.TenantId">
            <summary>
            Tenant's Id, if this role is a tenant-level role. Null, if not.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Roles.AbpRole`2.Name">
            <summary>
            Unique name of this role.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Roles.AbpRole`2.DisplayName">
            <summary>
            Display name of this role.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Roles.AbpRole`2.IsStatic">
            <summary>
            Is this a static role?
            Static roles can not be deleted, can not change their name.
            They can be used programmatically.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Roles.AbpRole`2.IsDefault">
            <summary>
            Is this role will be assigned to new users as default?
            </summary>
        </member>
        <member name="P:Abp.Authorization.Roles.AbpRole`2.Permissions">
            <summary>
            List of permissions of the role.
            </summary>
        </member>
        <member name="T:Abp.Authorization.Users.UserRole">
            <summary>
            Represents role record of a user. 
            </summary>
        </member>
        <member name="M:Abp.Authorization.Users.UserRole.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Authorization.Users.UserRole"/> object.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Users.UserRole.#ctor(System.Int64,System.Int32)">
            <summary>
            Creates a new <see cref="T:Abp.Authorization.Users.UserRole"/> object.
            </summary>
            <param name="userId">User id</param>
            <param name="roleId">Role id</param>
        </member>
        <member name="P:Abp.Authorization.Users.UserRole.UserId">
            <summary>
            User id.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.UserRole.RoleId">
            <summary>
            Role id.
            </summary>
        </member>
        <member name="T:Abp.MultiTenancy.AbpTenant`2">
            <summary>
            Represents a Tenant of the application.
            </summary>
        </member>
        <member name="F:Abp.MultiTenancy.AbpTenant`2.DefaultTenantName">
            <summary>
            "Default".
            </summary>
        </member>
        <member name="F:Abp.MultiTenancy.AbpTenant`2.TenancyNameRegex">
            <summary>
            "^[a-zA-Z][a-zA-Z0-9_-]{1,}$".
            </summary>
        </member>
        <member name="F:Abp.MultiTenancy.AbpTenant`2.MaxTenancyNameLength">
            <summary>
            Max length of the <see cref="P:Abp.MultiTenancy.AbpTenant`2.TenancyName"/> property.
            </summary>
        </member>
        <member name="F:Abp.MultiTenancy.AbpTenant`2.MaxNameLength">
            <summary>
            Max length of the <see cref="P:Abp.MultiTenancy.AbpTenant`2.Name"/> property.
            </summary>
        </member>
        <member name="M:Abp.MultiTenancy.AbpTenant`2.#ctor">
            <summary>
            Creates a new tenant.
            </summary>
        </member>
        <member name="M:Abp.MultiTenancy.AbpTenant`2.#ctor(System.String,System.String)">
            <summary>
            Creates a new tenant.
            </summary>
            <param name="tenancyName">UNIQUE name of this Tenant</param>
            <param name="name">Display name of the Tenant</param>
        </member>
        <member name="P:Abp.MultiTenancy.AbpTenant`2.TenancyName">
            <summary>
            Tenancy name. This property is the UNIQUE name of this Tenant.
            It can be used as subdomain name in a web application.
            </summary>
        </member>
        <member name="P:Abp.MultiTenancy.AbpTenant`2.Name">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Abp.MultiTenancy.AbpTenant`2.IsActive">
            <summary>
            Is this tenant active?
            If as tenant is not active, no user of this tenant can use the application.
            </summary>
        </member>
        <member name="P:Abp.MultiTenancy.AbpTenant`2.Settings">
            <summary>
            Defined settings for this tenant.
            </summary>
        </member>
        <member name="T:Abp.Authorization.Users.AbpUser`2">
            <summary>
            Represents a user.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Users.AbpUser`2.AdminUserName">
            <summary>
            UserName of the admin.
            admin can not be deleted and UserName of the admin can not be changed.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Users.AbpUser`2.MaxNameLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Authorization.Users.AbpUser`2.Name"/> property.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Users.AbpUser`2.MaxSurnameLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Authorization.Users.AbpUser`2.Surname"/> property.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Users.AbpUser`2.MaxUserNameLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Authorization.Users.AbpUser`2.UserName"/> property.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Users.AbpUser`2.MaxPasswordLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Authorization.Users.AbpUser`2.Password"/> property.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Users.AbpUser`2.MaxPlainPasswordLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Authorization.Users.AbpUser`2.Password"/> without hashed.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Users.AbpUser`2.MaxEmailAddressLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Authorization.Users.AbpUser`2.EmailAddress"/> property.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Users.AbpUser`2.MaxEmailConfirmationCodeLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Authorization.Users.AbpUser`2.EmailConfirmationCode"/> property.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Users.AbpUser`2.MaxPasswordResetCodeLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Authorization.Users.AbpUser`2.PasswordResetCode"/> property.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Users.AbpUser`2.MaxAuthenticationSourceLength">
            <summary>
            Maximum length of the <see cref="P:Abp.Authorization.Users.AbpUser`2.AuthenticationSource"/> property.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.Tenant">
            <summary>
            Tenant of this user.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.TenantId">
            <summary>
            Tenant Id of this user.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.AuthenticationSource">
            <summary>
            Authorization source name.
            It's set to external authentication source name if created by an external source.
            Default: null.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.Name">
            <summary>
            Name of the user.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.Surname">
            <summary>
            Surname of the user.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.UserName">
            <summary>
            User name.
            User name must be unique for it's tenant.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.Password">
            <summary>
            Password of the user.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.EmailAddress">
            <summary>
            Email address of the user.
            Email address must be unique for it's tenant.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.IsEmailConfirmed">
            <summary>
            Is the <see cref="P:Abp.Authorization.Users.AbpUser`2.EmailAddress"/> confirmed.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.EmailConfirmationCode">
            <summary>
            Confirmation code for email.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.PasswordResetCode">
            <summary>
            Reset code for password.
            It's not valid if it's null.
            It's for one usage and must be set to null after reset.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.LastLoginTime">
            <summary>
            The last time this user entered to the system.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.IsActive">
            <summary>
            Is this user active?
            If as user is not active, he/she can not use the application.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.Logins">
            <summary>
            Login definitions for this user.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.Roles">
            <summary>
            Role definitions for this user.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.Permissions">
            <summary>
            Permission definitions for this user.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.AbpUser`2.Settings">
            <summary>
            Settings for this user.
            </summary>
        </member>
        <member name="T:Abp.Authorization.Users.UserLogin">
            <summary>
            Used to store a User Login for external Login services.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Users.UserLogin.MaxLoginProviderLength">
            <summary>
            Maximum length of <see cref="P:Abp.Authorization.Users.UserLogin.LoginProvider"/> property.
            </summary>
        </member>
        <member name="F:Abp.Authorization.Users.UserLogin.MaxProviderKeyLength">
            <summary>
            Maximum length of <see cref="P:Abp.Authorization.Users.UserLogin.ProviderKey"/> property.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.UserLogin.UserId">
            <summary>
            Id of the User.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.UserLogin.LoginProvider">
            <summary>
            Login Provider.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Users.UserLogin.ProviderKey">
            <summary>
            Key in the <see cref="P:Abp.Authorization.Users.UserLogin.LoginProvider"/>.
            </summary>
        </member>
        <member name="F:Abp.Zero.AbpZeroConsts.LocalizationSourceName">
            <summary>
            "AbpZero"
            </summary>
        </member>
        <member name="T:Abp.Zero.AbpZeroCoreModule">
            <summary>
            ABP zero core module.
            </summary>
        </member>
        <member name="F:Abp.Zero.AbpZeroCoreModule.CurrentVersion">
            <summary>
            Current version of the zero module.
            </summary>
        </member>
        <member name="T:Abp.Utils.Helpers.RandomHelper">
            <summary>
            Internally used to generate random numbers and codes.
            </summary>
        </member>
        <member name="F:Abp.Zero.Configuration.AbpZeroSettingNames.UserManagement.IsEmailConfirmationRequiredForLogin">
            <summary>
            "Abp.Zero.UserManagement.IsEmailConfirmationRequiredForLogin".
            </summary>
        </member>
        <member name="T:Abp.Zero.Configuration.IAbpZeroConfig">
            <summary>
            Configuration options for zero module.
            </summary>
        </member>
        <member name="P:Abp.Zero.Configuration.IAbpZeroConfig.RoleManagement">
            <summary>
            Gets role management config.
            </summary>
        </member>
        <member name="P:Abp.Zero.Configuration.IAbpZeroConfig.UserManagement">
            <summary>
            Gets user management config.
            </summary>
        </member>
        <member name="T:Abp.Zero.Configuration.IUserManagementConfig">
            <summary>
            User management configuration.
            </summary>
        </member>
        <member name="T:Abp.Zero.Configuration.ModuleZeroConfigurationExtensions">
            <summary>
            Extension methods for module zero configurations.
            </summary>
        </member>
        <member name="M:Abp.Zero.Configuration.ModuleZeroConfigurationExtensions.Zero(Abp.Configuration.Startup.IModuleConfigurations)">
            <summary>
            Used to configure module zero.
            </summary>
            <param name="moduleConfigurations"></param>
            <returns></returns>
        </member>
    </members>
</doc>
